"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[813],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=o,m=p["".concat(a,".").concat(d)]||p[d]||f[d]||c;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,s=new Array(c);s[0]=d;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<c;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3928:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const c={sidebar_position:2},s="Convert Currencies",i={unversionedId:"usage/convert",id:"usage/convert",title:"Convert Currencies",description:"Basic Convert",source:"@site/docs/usage/convert.md",sourceDirName:"usage",slug:"/usage/convert",permalink:"/nestjs-cashify/docs/usage/convert",draft:!1,editUrl:"https://github.com/vahidvdn/nestjs-cashify/tree/master/docs/docs/usage/convert.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Import Module",permalink:"/nestjs-cashify/docs/usage/import-module"},next:{title:"Parsing",permalink:"/nestjs-cashify/docs/usage/parsing"}},a={},l=[{value:"Basic Convert",id:"basic-convert",level:2},{value:"Method 1: service method",id:"method-1-service-method",level:3},{value:"Method 2: injecting instance of cashify class",id:"method-2-injecting-instance-of-cashify-class",level:3}],u={toc:l},p="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"convert-currencies"},"Convert Currencies"),(0,o.kt)("h2",{id:"basic-convert"},"Basic Convert"),(0,o.kt)("p",null,"In order to convert currencies to each other in controllers or services, we have two approaches:"),(0,o.kt)("h3",{id:"method-1-service-method"},"Method 1: service method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { CashifyService } from 'nestjs-cashify';\n\nconstructor(private cashifyService: CashifyService) {\n  const result = this.cashifyService.convert(10, {from: 'EUR', to: 'GBP'});\n  console.log(result);\n}\n")),(0,o.kt)("h3",{id:"method-2-injecting-instance-of-cashify-class"},"Method 2: injecting instance of cashify class"),(0,o.kt)("p",null,"Note: Since this module is based on nodejs cashify library, in case there can be more methods added to the core library, you can inject the instance and use it as following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Cashify } from 'cashify';\nimport { CASHIFY } from 'nestjs-cashify';\n\nconstructor(@Inject(CASHIFY) private cashify: Cashify) {\n  const result2 = this.cashify.convert(10, {from: 'EUR', to: 'GBP'});\n  console.log(result2);\n}\n")))}f.isMDXComponent=!0}}]);