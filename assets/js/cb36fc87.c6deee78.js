"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[938],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="Import Module",s={unversionedId:"usage/import-module",id:"usage/import-module",title:"Import Module",description:"First you need to import the module in the AppModule (or alternatively in a feature module)",source:"@site/docs/usage/import-module.md",sourceDirName:"usage",slug:"/usage/import-module",permalink:"/nestjs-cashify/docs/usage/import-module",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/import-module.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/nestjs-cashify/docs/category/usage"},next:{title:"Convert Currencies",permalink:"/nestjs-cashify/docs/usage/convert"}},l={},c=[{value:"Basic Usage: Import and Configure",id:"basic-usage-import-and-configure",level:2},{value:"Async Configuration",id:"async-configuration",level:2},{value:"forRootAsync with useFactory",id:"forrootasync-with-usefactory",level:3},{value:"forRootAsync with useClass",id:"forrootasync-with-useclass",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"import-module"},"Import Module"),(0,o.kt)("p",null,"First you need to import the module in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppModule")," (or alternatively in a feature module)"),(0,o.kt)("h2",{id:"basic-usage-import-and-configure"},"Basic Usage: Import and Configure"),(0,o.kt)("p",null,"Import the module and configure as following. You need to specify the base currency and rates."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"import { CashifyModule } from 'nestjs-cashify';\n\nconst rates = {\n  GBP: 0.92,\n  EUR: 1.00,\n  USD: 1.12\n};\n\n@Module({\n  imports: [CashifyModule.forRoot({ base: 'EUR', rates })],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n")),(0,o.kt)("h2",{id:"async-configuration"},"Async Configuration"),(0,o.kt)("p",null,"You can configure your module in an async way. For this, there are some options available: ",(0,o.kt)("inlineCode",{parentName:"p"},"useFactory")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useClass"),". Let's see."),(0,o.kt)("h3",{id:"forrootasync-with-usefactory"},"forRootAsync with useFactory"),(0,o.kt)("p",null,"In order to configure with ",(0,o.kt)("inlineCode",{parentName:"p"},"useFactory"),", use the following import:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"@Module({\n  imports: [\n    CashifyModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        base: configService.get<string>('BASE'), rates\n      }),\n      inject: [ConfigService]\n    })\n  ]\n})\nexport class AppModule {}\n")),(0,o.kt)("h3",{id:"forrootasync-with-useclass"},"forRootAsync with useClass"),(0,o.kt)("p",null,"In order to configure with ",(0,o.kt)("inlineCode",{parentName:"p"},"useClass"),", use the following import:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"@Module({\n  imports: [\n    CashifyModule.forRootAsync({\n      useClass: CashifyConfigService,\n      import: [ConfigModule],\n      extraProviders: [ConfigService],\n    })\n  ]\n})\nexport class AppModule {}\n")),(0,o.kt)("p",null,"And for CashifyConfigService we have the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { CashifyOptionsFactory } from 'nestjs-cashify';\n\n@Injectable()\nexport class CashifyConfigService implements CashifyOptionsFactory {\n  constructor(private configService: ConfigService) {}\n\n  createCashifyOptions() {\n    const rates = {\n      GBP: 0.92,\n      EUR: 1.00,\n      USD: 1.12\n    };\n    return {\n      base: this.configService.get<string>('BASE'),\n      rates\n    };\n  }\n}\n")))}d.isMDXComponent=!0}}]);